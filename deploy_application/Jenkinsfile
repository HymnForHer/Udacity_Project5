pipeline {
	agent any
	environment {
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
		AWS_PRIVATE_KEY = credentials('AWS_PRIVATE_KEY')
		DOCKER = credentials('DOCKER_LOGIN')
   	}
	stages {

		stage('Lint HTML') {
			steps {
				sh '''
					chmod 777 ./deploy_application/lint_check.sh
					./deploy_application/lint_check.sh index.htm
				'''
			}
		}
		
		stage('Build Docker Image') {
			steps {
				sh '''
					sudo docker build -f ./deploy_application/Dockerfile -t hymn208/udacity-prj5 .
				'''
			}
		}

		stage('Push Image To Dockerhub') {
			steps {
				sh '''
					sudo docker login -u $DOCKER_USR -p $DOCKER_PSW
					sudo docker push hymn208/udacity-prj5
				'''
			}
		}

		stage('Set current kubectl context') {
			steps {
				sh '''
					export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
					export AWS_SECRET_ACCESS_KEY=$AWS_PRIVATE_KEY
					kubectl config use-context arn:aws:eks:us-east-1:361588775511:cluster/EKS-Cluster
				'''
			}
		}

		stage('Deploy blue container') {
			steps {
				sh '''
					export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
					export AWS_SECRET_ACCESS_KEY=$AWS_PRIVATE_KEY
					kubectl apply -f ./blue-controller.json
				'''
			}
		}

		stage('Deploy green container') {
			steps {
				sh '''
					export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
					export AWS_SECRET_ACCESS_KEY=$AWS_PRIVATE_KEY
					kubectl apply -f ./green-controller.json
				'''
			}
		}

		stage('Create the service in the cluster, redirect to blue') {
			steps {
				sh '''
					export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
					export AWS_SECRET_ACCESS_KEY=$AWS_PRIVATE_KEY
					kubectl apply -f ./blue-service.json
				'''
			}
		}

		stage('Wait user approve') {
            steps {
                input "Ready to redirect traffic to green?"
            }
        }

		stage('Create the service in the cluster, redirect to green') {
			steps {
				sh '''
					export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
					export AWS_SECRET_ACCESS_KEY=$AWS_PRIVATE_KEY
					kubectl apply -f ./green-service.json
				'''
			}
		}

	}
}
